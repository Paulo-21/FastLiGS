<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="789.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="789.00"> </text><svg id="frames" x="10" width="1180" total_samples="537"><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.19%)</title><rect x="0.0000%" y="725" width="0.1862%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.19%)</title><rect x="0.0000%" y="709" width="0.1862%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.19%)</title><rect x="0.0000%" y="693" width="0.1862%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.19%)</title><rect x="0.0000%" y="677" width="0.1862%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.19%)</title><rect x="0.0000%" y="661" width="0.1862%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.19%)</title><rect x="0.0000%" y="645" width="0.1862%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="0.0000%" y="629" width="0.1862%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="0.0000%" y="613" width="0.1862%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="0.0000%" y="597" width="0.1862%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="0.0000%" y="581" width="0.1862%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="0.0000%" y="565" width="0.1862%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="0.0000%" y="549" width="0.1862%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="0.0000%" y="533" width="0.1862%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="0.0000%" y="517" width="0.1862%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="0.0000%" y="501" width="0.1862%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="0.0000%" y="485" width="0.1862%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (5 samples, 0.93%)</title><rect x="0.1862%" y="677" width="0.9311%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="5"/><text x="0.4362%" y="687.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (5 samples, 0.93%)</title><rect x="0.1862%" y="661" width="0.9311%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="5"/><text x="0.4362%" y="671.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (5 samples, 0.93%)</title><rect x="0.1862%" y="645" width="0.9311%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="5"/><text x="0.4362%" y="655.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (5 samples, 0.93%)</title><rect x="0.1862%" y="629" width="0.9311%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="5"/><text x="0.4362%" y="639.50"></text></g><g><title>std::panic::catch_unwind (5 samples, 0.93%)</title><rect x="0.1862%" y="613" width="0.9311%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="5"/><text x="0.4362%" y="623.50"></text></g><g><title>std::panicking::try (5 samples, 0.93%)</title><rect x="0.1862%" y="597" width="0.9311%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="5"/><text x="0.4362%" y="607.50"></text></g><g><title>std::panicking::try::do_call (5 samples, 0.93%)</title><rect x="0.1862%" y="581" width="0.9311%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="5"/><text x="0.4362%" y="591.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (5 samples, 0.93%)</title><rect x="0.1862%" y="565" width="0.9311%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="5"/><text x="0.4362%" y="575.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (5 samples, 0.93%)</title><rect x="0.1862%" y="549" width="0.9311%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="5"/><text x="0.4362%" y="559.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5 samples, 0.93%)</title><rect x="0.1862%" y="533" width="0.9311%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="5"/><text x="0.4362%" y="543.50"></text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::_{{closure}} (5 samples, 0.93%)</title><rect x="0.1862%" y="517" width="0.9311%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="5"/><text x="0.4362%" y="527.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (5 samples, 0.93%)</title><rect x="0.1862%" y="501" width="0.9311%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="5"/><text x="0.4362%" y="511.50"></text></g><g><title>rayon_core::registry::main_loop (5 samples, 0.93%)</title><rect x="0.1862%" y="485" width="0.9311%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="5"/><text x="0.4362%" y="495.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_out_of_work (5 samples, 0.93%)</title><rect x="0.1862%" y="469" width="0.9311%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="5"/><text x="0.4362%" y="479.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (5 samples, 0.93%)</title><rect x="0.1862%" y="453" width="0.9311%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="5"/><text x="0.4362%" y="463.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (5 samples, 0.93%)</title><rect x="0.1862%" y="437" width="0.9311%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="5"/><text x="0.4362%" y="447.50"></text></g><g><title>rayon_core::sleep::Sleep::no_work_found (5 samples, 0.93%)</title><rect x="0.1862%" y="421" width="0.9311%" height="15" fill="rgb(213,181,19)" fg:x="1" fg:w="5"/><text x="0.4362%" y="431.50"></text></g><g><title>std::thread::yield_now (5 samples, 0.93%)</title><rect x="0.1862%" y="405" width="0.9311%" height="15" fill="rgb(254,191,54)" fg:x="1" fg:w="5"/><text x="0.4362%" y="415.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::yield_now (5 samples, 0.93%)</title><rect x="0.1862%" y="389" width="0.9311%" height="15" fill="rgb(241,83,37)" fg:x="1" fg:w="5"/><text x="0.4362%" y="399.50"></text></g><g><title>__sched_yield (5 samples, 0.93%)</title><rect x="0.1862%" y="373" width="0.9311%" height="15" fill="rgb(233,36,39)" fg:x="1" fg:w="5"/><text x="0.4362%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="0.1862%" y="357" width="0.9311%" height="15" fill="rgb(226,3,54)" fg:x="1" fg:w="5"/><text x="0.4362%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="0.1862%" y="341" width="0.9311%" height="15" fill="rgb(245,192,40)" fg:x="1" fg:w="5"/><text x="0.4362%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="0.1862%" y="325" width="0.9311%" height="15" fill="rgb(238,167,29)" fg:x="1" fg:w="5"/><text x="0.4362%" y="335.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="0.1862%" y="309" width="0.9311%" height="15" fill="rgb(232,182,51)" fg:x="1" fg:w="5"/><text x="0.4362%" y="319.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="0.1862%" y="293" width="0.9311%" height="15" fill="rgb(231,60,39)" fg:x="1" fg:w="5"/><text x="0.4362%" y="303.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="0.1862%" y="277" width="0.9311%" height="15" fill="rgb(208,69,12)" fg:x="1" fg:w="5"/><text x="0.4362%" y="287.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="0.1862%" y="261" width="0.9311%" height="15" fill="rgb(235,93,37)" fg:x="1" fg:w="5"/><text x="0.4362%" y="271.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="0.1862%" y="245" width="0.9311%" height="15" fill="rgb(213,116,39)" fg:x="1" fg:w="5"/><text x="0.4362%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="0.1862%" y="229" width="0.9311%" height="15" fill="rgb(222,207,29)" fg:x="1" fg:w="5"/><text x="0.4362%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="0.1862%" y="213" width="0.9311%" height="15" fill="rgb(206,96,30)" fg:x="1" fg:w="5"/><text x="0.4362%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="0.1862%" y="197" width="0.9311%" height="15" fill="rgb(218,138,4)" fg:x="1" fg:w="5"/><text x="0.4362%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="0.1862%" y="181" width="0.9311%" height="15" fill="rgb(250,191,14)" fg:x="1" fg:w="5"/><text x="0.4362%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="0.1862%" y="165" width="0.9311%" height="15" fill="rgb(239,60,40)" fg:x="1" fg:w="5"/><text x="0.4362%" y="175.50"></text></g><g><title>__mmap (2 samples, 0.37%)</title><rect x="1.1173%" y="549" width="0.3724%" height="15" fill="rgb(206,27,48)" fg:x="6" fg:w="2"/><text x="1.3673%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.37%)</title><rect x="1.1173%" y="533" width="0.3724%" height="15" fill="rgb(225,35,8)" fg:x="6" fg:w="2"/><text x="1.3673%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.37%)</title><rect x="1.1173%" y="517" width="0.3724%" height="15" fill="rgb(250,213,24)" fg:x="6" fg:w="2"/><text x="1.3673%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.37%)</title><rect x="1.1173%" y="501" width="0.3724%" height="15" fill="rgb(247,123,22)" fg:x="6" fg:w="2"/><text x="1.3673%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="1.3035%" y="485" width="0.1862%" height="15" fill="rgb(231,138,38)" fg:x="7" fg:w="1"/><text x="1.5535%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="1.3035%" y="469" width="0.1862%" height="15" fill="rgb(231,145,46)" fg:x="7" fg:w="1"/><text x="1.5535%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="1.3035%" y="453" width="0.1862%" height="15" fill="rgb(251,118,11)" fg:x="7" fg:w="1"/><text x="1.5535%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="1.3035%" y="437" width="0.1862%" height="15" fill="rgb(217,147,25)" fg:x="7" fg:w="1"/><text x="1.5535%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="1.3035%" y="421" width="0.1862%" height="15" fill="rgb(247,81,37)" fg:x="7" fg:w="1"/><text x="1.5535%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="1.3035%" y="405" width="0.1862%" height="15" fill="rgb(209,12,38)" fg:x="7" fg:w="1"/><text x="1.5535%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="1.3035%" y="389" width="0.1862%" height="15" fill="rgb(227,1,9)" fg:x="7" fg:w="1"/><text x="1.5535%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="1.3035%" y="373" width="0.1862%" height="15" fill="rgb(248,47,43)" fg:x="7" fg:w="1"/><text x="1.5535%" y="383.50"></text></g><g><title>[libc.so.6] (9 samples, 1.68%)</title><rect x="0.1862%" y="725" width="1.6760%" height="15" fill="rgb(221,10,30)" fg:x="1" fg:w="9"/><text x="0.4362%" y="735.50"></text></g><g><title>[libc.so.6] (9 samples, 1.68%)</title><rect x="0.1862%" y="709" width="1.6760%" height="15" fill="rgb(210,229,1)" fg:x="1" fg:w="9"/><text x="0.4362%" y="719.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (9 samples, 1.68%)</title><rect x="0.1862%" y="693" width="1.6760%" height="15" fill="rgb(222,148,37)" fg:x="1" fg:w="9"/><text x="0.4362%" y="703.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (4 samples, 0.74%)</title><rect x="1.1173%" y="677" width="0.7449%" height="15" fill="rgb(234,67,33)" fg:x="6" fg:w="4"/><text x="1.3673%" y="687.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (4 samples, 0.74%)</title><rect x="1.1173%" y="661" width="0.7449%" height="15" fill="rgb(247,98,35)" fg:x="6" fg:w="4"/><text x="1.3673%" y="671.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::current_guard (4 samples, 0.74%)</title><rect x="1.1173%" y="645" width="0.7449%" height="15" fill="rgb(247,138,52)" fg:x="6" fg:w="4"/><text x="1.3673%" y="655.50"></text></g><g><title>pthread_getattr_np (4 samples, 0.74%)</title><rect x="1.1173%" y="629" width="0.7449%" height="15" fill="rgb(213,79,30)" fg:x="6" fg:w="4"/><text x="1.3673%" y="639.50"></text></g><g><title>malloc (4 samples, 0.74%)</title><rect x="1.1173%" y="613" width="0.7449%" height="15" fill="rgb(246,177,23)" fg:x="6" fg:w="4"/><text x="1.3673%" y="623.50"></text></g><g><title>[libc.so.6] (4 samples, 0.74%)</title><rect x="1.1173%" y="597" width="0.7449%" height="15" fill="rgb(230,62,27)" fg:x="6" fg:w="4"/><text x="1.3673%" y="607.50"></text></g><g><title>[libc.so.6] (4 samples, 0.74%)</title><rect x="1.1173%" y="581" width="0.7449%" height="15" fill="rgb(216,154,8)" fg:x="6" fg:w="4"/><text x="1.3673%" y="591.50"></text></g><g><title>[libc.so.6] (4 samples, 0.74%)</title><rect x="1.1173%" y="565" width="0.7449%" height="15" fill="rgb(244,35,45)" fg:x="6" fg:w="4"/><text x="1.3673%" y="575.50"></text></g><g><title>__munmap (2 samples, 0.37%)</title><rect x="1.4898%" y="549" width="0.3724%" height="15" fill="rgb(251,115,12)" fg:x="8" fg:w="2"/><text x="1.7398%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.37%)</title><rect x="1.4898%" y="533" width="0.3724%" height="15" fill="rgb(240,54,50)" fg:x="8" fg:w="2"/><text x="1.7398%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.37%)</title><rect x="1.4898%" y="517" width="0.3724%" height="15" fill="rgb(233,84,52)" fg:x="8" fg:w="2"/><text x="1.7398%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.37%)</title><rect x="1.4898%" y="501" width="0.3724%" height="15" fill="rgb(207,117,47)" fg:x="8" fg:w="2"/><text x="1.7398%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.37%)</title><rect x="1.4898%" y="485" width="0.3724%" height="15" fill="rgb(249,43,39)" fg:x="8" fg:w="2"/><text x="1.7398%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.37%)</title><rect x="1.4898%" y="469" width="0.3724%" height="15" fill="rgb(209,38,44)" fg:x="8" fg:w="2"/><text x="1.7398%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.37%)</title><rect x="1.4898%" y="453" width="0.3724%" height="15" fill="rgb(236,212,23)" fg:x="8" fg:w="2"/><text x="1.7398%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.37%)</title><rect x="1.4898%" y="437" width="0.3724%" height="15" fill="rgb(242,79,21)" fg:x="8" fg:w="2"/><text x="1.7398%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.37%)</title><rect x="1.4898%" y="421" width="0.3724%" height="15" fill="rgb(211,96,35)" fg:x="8" fg:w="2"/><text x="1.7398%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.37%)</title><rect x="1.4898%" y="405" width="0.3724%" height="15" fill="rgb(253,215,40)" fg:x="8" fg:w="2"/><text x="1.7398%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="1.6760%" y="389" width="0.1862%" height="15" fill="rgb(211,81,21)" fg:x="9" fg:w="1"/><text x="1.9260%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="1.6760%" y="373" width="0.1862%" height="15" fill="rgb(208,190,38)" fg:x="9" fg:w="1"/><text x="1.9260%" y="383.50"></text></g><g><title>[unknown] (32 samples, 5.96%)</title><rect x="3.7244%" y="709" width="5.9590%" height="15" fill="rgb(235,213,38)" fg:x="20" fg:w="32"/><text x="3.9744%" y="719.50">[unknown]</text></g><g><title>[unknown] (32 samples, 5.96%)</title><rect x="3.7244%" y="693" width="5.9590%" height="15" fill="rgb(237,122,38)" fg:x="20" fg:w="32"/><text x="3.9744%" y="703.50">[unknown]</text></g><g><title>[unknown] (32 samples, 5.96%)</title><rect x="3.7244%" y="677" width="5.9590%" height="15" fill="rgb(244,218,35)" fg:x="20" fg:w="32"/><text x="3.9744%" y="687.50">[unknown]</text></g><g><title>[unknown] (31 samples, 5.77%)</title><rect x="3.9106%" y="661" width="5.7728%" height="15" fill="rgb(240,68,47)" fg:x="21" fg:w="31"/><text x="4.1606%" y="671.50">[unknow..</text></g><g><title>[unknown] (31 samples, 5.77%)</title><rect x="3.9106%" y="645" width="5.7728%" height="15" fill="rgb(210,16,53)" fg:x="21" fg:w="31"/><text x="4.1606%" y="655.50">[unknow..</text></g><g><title>[unknown] (31 samples, 5.77%)</title><rect x="3.9106%" y="629" width="5.7728%" height="15" fill="rgb(235,124,12)" fg:x="21" fg:w="31"/><text x="4.1606%" y="639.50">[unknow..</text></g><g><title>[unknown] (31 samples, 5.77%)</title><rect x="3.9106%" y="613" width="5.7728%" height="15" fill="rgb(224,169,11)" fg:x="21" fg:w="31"/><text x="4.1606%" y="623.50">[unknow..</text></g><g><title>[unknown] (31 samples, 5.77%)</title><rect x="3.9106%" y="597" width="5.7728%" height="15" fill="rgb(250,166,2)" fg:x="21" fg:w="31"/><text x="4.1606%" y="607.50">[unknow..</text></g><g><title>[unknown] (6 samples, 1.12%)</title><rect x="8.5661%" y="581" width="1.1173%" height="15" fill="rgb(242,216,29)" fg:x="46" fg:w="6"/><text x="8.8161%" y="591.50"></text></g><g><title>[unknown] (6 samples, 1.12%)</title><rect x="8.5661%" y="565" width="1.1173%" height="15" fill="rgb(230,116,27)" fg:x="46" fg:w="6"/><text x="8.8161%" y="575.50"></text></g><g><title>[unknown] (6 samples, 1.12%)</title><rect x="8.5661%" y="549" width="1.1173%" height="15" fill="rgb(228,99,48)" fg:x="46" fg:w="6"/><text x="8.8161%" y="559.50"></text></g><g><title>[unknown] (6 samples, 1.12%)</title><rect x="8.5661%" y="533" width="1.1173%" height="15" fill="rgb(253,11,6)" fg:x="46" fg:w="6"/><text x="8.8161%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="8.7523%" y="517" width="0.9311%" height="15" fill="rgb(247,143,39)" fg:x="47" fg:w="5"/><text x="9.0023%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="8.7523%" y="501" width="0.9311%" height="15" fill="rgb(236,97,10)" fg:x="47" fg:w="5"/><text x="9.0023%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="8.7523%" y="485" width="0.9311%" height="15" fill="rgb(233,208,19)" fg:x="47" fg:w="5"/><text x="9.0023%" y="495.50"></text></g><g><title>[unknown] (3 samples, 0.56%)</title><rect x="9.1248%" y="469" width="0.5587%" height="15" fill="rgb(216,164,2)" fg:x="49" fg:w="3"/><text x="9.3748%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.37%)</title><rect x="9.3110%" y="453" width="0.3724%" height="15" fill="rgb(220,129,5)" fg:x="50" fg:w="2"/><text x="9.5610%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="9.4972%" y="437" width="0.1862%" height="15" fill="rgb(242,17,10)" fg:x="51" fg:w="1"/><text x="9.7472%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="9.4972%" y="421" width="0.1862%" height="15" fill="rgb(242,107,0)" fg:x="51" fg:w="1"/><text x="9.7472%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="9.4972%" y="405" width="0.1862%" height="15" fill="rgb(251,28,31)" fg:x="51" fg:w="1"/><text x="9.7472%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="9.4972%" y="389" width="0.1862%" height="15" fill="rgb(233,223,10)" fg:x="51" fg:w="1"/><text x="9.7472%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="9.4972%" y="373" width="0.1862%" height="15" fill="rgb(215,21,27)" fg:x="51" fg:w="1"/><text x="9.7472%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.56%)</title><rect x="9.6834%" y="709" width="0.5587%" height="15" fill="rgb(232,23,21)" fg:x="52" fg:w="3"/><text x="9.9334%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.19%)</title><rect x="10.0559%" y="693" width="0.1862%" height="15" fill="rgb(244,5,23)" fg:x="54" fg:w="1"/><text x="10.3059%" y="703.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.19%)</title><rect x="10.0559%" y="677" width="0.1862%" height="15" fill="rgb(226,81,46)" fg:x="54" fg:w="1"/><text x="10.3059%" y="687.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.19%)</title><rect x="10.0559%" y="661" width="0.1862%" height="15" fill="rgb(247,70,30)" fg:x="54" fg:w="1"/><text x="10.3059%" y="671.50"></text></g><g><title>__rdl_realloc (1 samples, 0.19%)</title><rect x="10.0559%" y="645" width="0.1862%" height="15" fill="rgb(212,68,19)" fg:x="54" fg:w="1"/><text x="10.3059%" y="655.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.19%)</title><rect x="10.0559%" y="629" width="0.1862%" height="15" fill="rgb(240,187,13)" fg:x="54" fg:w="1"/><text x="10.3059%" y="639.50"></text></g><g><title>[unknown] (48 samples, 8.94%)</title><rect x="1.8622%" y="725" width="8.9385%" height="15" fill="rgb(223,113,26)" fg:x="10" fg:w="48"/><text x="2.1122%" y="735.50">[unknown]</text></g><g><title>fast_nn_burn::parser::get_input (3 samples, 0.56%)</title><rect x="10.2421%" y="709" width="0.5587%" height="15" fill="rgb(206,192,2)" fg:x="55" fg:w="3"/><text x="10.4921%" y="719.50"></text></g><g><title>fast_nn_burn::parser::reading_cnf_perf2 (3 samples, 0.56%)</title><rect x="10.2421%" y="693" width="0.5587%" height="15" fill="rgb(241,108,4)" fg:x="55" fg:w="3"/><text x="10.4921%" y="703.50"></text></g><g><title>fast_nn_burn::graph::ArgumentationFramework::add_attack (3 samples, 0.56%)</title><rect x="10.2421%" y="677" width="0.5587%" height="15" fill="rgb(247,173,49)" fg:x="55" fg:w="3"/><text x="10.4921%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.56%)</title><rect x="10.2421%" y="661" width="0.5587%" height="15" fill="rgb(224,114,35)" fg:x="55" fg:w="3"/><text x="10.4921%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.56%)</title><rect x="10.2421%" y="645" width="0.5587%" height="15" fill="rgb(245,159,27)" fg:x="55" fg:w="3"/><text x="10.4921%" y="655.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&lt;&amp;f64&gt;&gt;::add_assign (1 samples, 0.19%)</title><rect x="10.8007%" y="565" width="0.1862%" height="15" fill="rgb(245,172,44)" fg:x="58" fg:w="1"/><text x="11.0507%" y="575.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.19%)</title><rect x="10.8007%" y="549" width="0.1862%" height="15" fill="rgb(236,23,11)" fg:x="58" fg:w="1"/><text x="11.0507%" y="559.50"></text></g><g><title>[libc.so.6] (4 samples, 0.74%)</title><rect x="13.4078%" y="357" width="0.7449%" height="15" fill="rgb(205,117,38)" fg:x="72" fg:w="4"/><text x="13.6578%" y="367.50"></text></g><g><title>fast_nn_burn::nn::af_nn (25 samples, 4.66%)</title><rect x="10.8007%" y="597" width="4.6555%" height="15" fill="rgb(237,72,25)" fg:x="58" fg:w="25"/><text x="11.0507%" y="607.50">fast_..</text></g><g><title>fast_nn_burn::gradualsemantics_opt::categorizer::solve (25 samples, 4.66%)</title><rect x="10.8007%" y="581" width="4.6555%" height="15" fill="rgb(244,70,9)" fg:x="58" fg:w="25"/><text x="11.0507%" y="591.50">fast_..</text></g><g><title>core::ptr::drop_in_place&lt;fast_nn_burn::graph::ArgumentationFramework&gt; (24 samples, 4.47%)</title><rect x="10.9870%" y="565" width="4.4693%" height="15" fill="rgb(217,125,39)" fg:x="59" fg:w="24"/><text x="11.2370%" y="575.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u32&gt;&gt;&gt; (24 samples, 4.47%)</title><rect x="10.9870%" y="549" width="4.4693%" height="15" fill="rgb(235,36,10)" fg:x="59" fg:w="24"/><text x="11.2370%" y="559.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 4.47%)</title><rect x="10.9870%" y="533" width="4.4693%" height="15" fill="rgb(251,123,47)" fg:x="59" fg:w="24"/><text x="11.2370%" y="543.50">&lt;allo..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;u32&gt;]&gt; (24 samples, 4.47%)</title><rect x="10.9870%" y="517" width="4.4693%" height="15" fill="rgb(221,13,13)" fg:x="59" fg:w="24"/><text x="11.2370%" y="527.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u32&gt;&gt; (24 samples, 4.47%)</title><rect x="10.9870%" y="501" width="4.4693%" height="15" fill="rgb(238,131,9)" fg:x="59" fg:w="24"/><text x="11.2370%" y="511.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u32&gt;&gt; (24 samples, 4.47%)</title><rect x="10.9870%" y="485" width="4.4693%" height="15" fill="rgb(211,50,8)" fg:x="59" fg:w="24"/><text x="11.2370%" y="495.50">core:..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 4.47%)</title><rect x="10.9870%" y="469" width="4.4693%" height="15" fill="rgb(245,182,24)" fg:x="59" fg:w="24"/><text x="11.2370%" y="479.50">&lt;allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24 samples, 4.47%)</title><rect x="10.9870%" y="453" width="4.4693%" height="15" fill="rgb(242,14,37)" fg:x="59" fg:w="24"/><text x="11.2370%" y="463.50">&lt;allo..</text></g><g><title>alloc::alloc::dealloc (24 samples, 4.47%)</title><rect x="10.9870%" y="437" width="4.4693%" height="15" fill="rgb(246,228,12)" fg:x="59" fg:w="24"/><text x="11.2370%" y="447.50">alloc..</text></g><g><title>__rdl_dealloc (24 samples, 4.47%)</title><rect x="10.9870%" y="421" width="4.4693%" height="15" fill="rgb(213,55,15)" fg:x="59" fg:w="24"/><text x="11.2370%" y="431.50">__rdl..</text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (24 samples, 4.47%)</title><rect x="10.9870%" y="405" width="4.4693%" height="15" fill="rgb(209,9,3)" fg:x="59" fg:w="24"/><text x="11.2370%" y="415.50">std::..</text></g><g><title>cfree (24 samples, 4.47%)</title><rect x="10.9870%" y="389" width="4.4693%" height="15" fill="rgb(230,59,30)" fg:x="59" fg:w="24"/><text x="11.2370%" y="399.50">cfree</text></g><g><title>[libc.so.6] (22 samples, 4.10%)</title><rect x="11.3594%" y="373" width="4.0968%" height="15" fill="rgb(209,121,21)" fg:x="61" fg:w="22"/><text x="11.6094%" y="383.50">[lib..</text></g><g><title>__default_morecore (7 samples, 1.30%)</title><rect x="14.1527%" y="357" width="1.3035%" height="15" fill="rgb(220,109,13)" fg:x="76" fg:w="7"/><text x="14.4027%" y="367.50"></text></g><g><title>__sbrk (7 samples, 1.30%)</title><rect x="14.1527%" y="341" width="1.3035%" height="15" fill="rgb(232,18,1)" fg:x="76" fg:w="7"/><text x="14.4027%" y="351.50"></text></g><g><title>brk (7 samples, 1.30%)</title><rect x="14.1527%" y="325" width="1.3035%" height="15" fill="rgb(215,41,42)" fg:x="76" fg:w="7"/><text x="14.4027%" y="335.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="14.1527%" y="309" width="1.3035%" height="15" fill="rgb(224,123,36)" fg:x="76" fg:w="7"/><text x="14.4027%" y="319.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="14.1527%" y="293" width="1.3035%" height="15" fill="rgb(240,125,3)" fg:x="76" fg:w="7"/><text x="14.4027%" y="303.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="14.1527%" y="277" width="1.3035%" height="15" fill="rgb(205,98,50)" fg:x="76" fg:w="7"/><text x="14.4027%" y="287.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="14.1527%" y="261" width="1.3035%" height="15" fill="rgb(205,185,37)" fg:x="76" fg:w="7"/><text x="14.4027%" y="271.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="14.1527%" y="245" width="1.3035%" height="15" fill="rgb(238,207,15)" fg:x="76" fg:w="7"/><text x="14.4027%" y="255.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="14.1527%" y="229" width="1.3035%" height="15" fill="rgb(213,199,42)" fg:x="76" fg:w="7"/><text x="14.4027%" y="239.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="14.1527%" y="213" width="1.3035%" height="15" fill="rgb(235,201,11)" fg:x="76" fg:w="7"/><text x="14.4027%" y="223.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="14.1527%" y="197" width="1.3035%" height="15" fill="rgb(207,46,11)" fg:x="76" fg:w="7"/><text x="14.4027%" y="207.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="14.1527%" y="181" width="1.3035%" height="15" fill="rgb(241,35,35)" fg:x="76" fg:w="7"/><text x="14.4027%" y="191.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="14.1527%" y="165" width="1.3035%" height="15" fill="rgb(243,32,47)" fg:x="76" fg:w="7"/><text x="14.4027%" y="175.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="14.1527%" y="149" width="1.3035%" height="15" fill="rgb(247,202,23)" fg:x="76" fg:w="7"/><text x="14.4027%" y="159.50"></text></g><g><title>[unknown] (6 samples, 1.12%)</title><rect x="14.3389%" y="133" width="1.1173%" height="15" fill="rgb(219,102,11)" fg:x="77" fg:w="6"/><text x="14.5889%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="14.5251%" y="117" width="0.9311%" height="15" fill="rgb(243,110,44)" fg:x="78" fg:w="5"/><text x="14.7751%" y="127.50"></text></g><g><title>[unknown] (3 samples, 0.56%)</title><rect x="14.8976%" y="101" width="0.5587%" height="15" fill="rgb(222,74,54)" fg:x="80" fg:w="3"/><text x="15.1476%" y="111.50"></text></g><g><title>[unknown] (3 samples, 0.56%)</title><rect x="14.8976%" y="85" width="0.5587%" height="15" fill="rgb(216,99,12)" fg:x="80" fg:w="3"/><text x="15.1476%" y="95.50"></text></g><g><title>[unknown] (2 samples, 0.37%)</title><rect x="15.0838%" y="69" width="0.3724%" height="15" fill="rgb(226,22,26)" fg:x="81" fg:w="2"/><text x="15.3338%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="15.2700%" y="53" width="0.1862%" height="15" fill="rgb(217,163,10)" fg:x="82" fg:w="1"/><text x="15.5200%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="15.2700%" y="37" width="0.1862%" height="15" fill="rgb(213,25,53)" fg:x="82" fg:w="1"/><text x="15.5200%" y="47.50"></text></g><g><title>&lt;&amp;u8 as core::ops::bit::BitAnd&lt;u8&gt;&gt;::bitand (13 samples, 2.42%)</title><rect x="33.8920%" y="565" width="2.4209%" height="15" fill="rgb(252,105,26)" fg:x="182" fg:w="13"/><text x="34.1420%" y="575.50">&lt;&amp;..</text></g><g><title>&lt;u8 as core::ops::bit::BitAnd&gt;::bitand (13 samples, 2.42%)</title><rect x="33.8920%" y="549" width="2.4209%" height="15" fill="rgb(220,39,43)" fg:x="182" fg:w="13"/><text x="34.1420%" y="559.50">&lt;u..</text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="36.1266%" y="533" width="0.1862%" height="15" fill="rgb(229,68,48)" fg:x="194" fg:w="1"/><text x="36.3766%" y="543.50"></text></g><g><title>[unknown] (68 samples, 12.66%)</title><rect x="36.3128%" y="565" width="12.6629%" height="15" fill="rgb(252,8,32)" fg:x="195" fg:w="68"/><text x="36.5628%" y="575.50">[unknown]</text></g><g><title>[unknown] (66 samples, 12.29%)</title><rect x="36.6853%" y="549" width="12.2905%" height="15" fill="rgb(223,20,43)" fg:x="197" fg:w="66"/><text x="36.9353%" y="559.50">[unknown]</text></g><g><title>[unknown] (66 samples, 12.29%)</title><rect x="36.6853%" y="533" width="12.2905%" height="15" fill="rgb(229,81,49)" fg:x="197" fg:w="66"/><text x="36.9353%" y="543.50">[unknown]</text></g><g><title>[unknown] (66 samples, 12.29%)</title><rect x="36.6853%" y="517" width="12.2905%" height="15" fill="rgb(236,28,36)" fg:x="197" fg:w="66"/><text x="36.9353%" y="527.50">[unknown]</text></g><g><title>[unknown] (64 samples, 11.92%)</title><rect x="37.0577%" y="501" width="11.9181%" height="15" fill="rgb(249,185,26)" fg:x="199" fg:w="64"/><text x="37.3077%" y="511.50">[unknown]</text></g><g><title>[unknown] (62 samples, 11.55%)</title><rect x="37.4302%" y="485" width="11.5456%" height="15" fill="rgb(249,174,33)" fg:x="201" fg:w="62"/><text x="37.6802%" y="495.50">[unknown]</text></g><g><title>[unknown] (62 samples, 11.55%)</title><rect x="37.4302%" y="469" width="11.5456%" height="15" fill="rgb(233,201,37)" fg:x="201" fg:w="62"/><text x="37.6802%" y="479.50">[unknown]</text></g><g><title>[unknown] (61 samples, 11.36%)</title><rect x="37.6164%" y="453" width="11.3594%" height="15" fill="rgb(221,78,26)" fg:x="202" fg:w="61"/><text x="37.8664%" y="463.50">[unknown]</text></g><g><title>[unknown] (61 samples, 11.36%)</title><rect x="37.6164%" y="437" width="11.3594%" height="15" fill="rgb(250,127,30)" fg:x="202" fg:w="61"/><text x="37.8664%" y="447.50">[unknown]</text></g><g><title>[unknown] (59 samples, 10.99%)</title><rect x="37.9888%" y="421" width="10.9870%" height="15" fill="rgb(230,49,44)" fg:x="204" fg:w="59"/><text x="38.2388%" y="431.50">[unknown]</text></g><g><title>[unknown] (56 samples, 10.43%)</title><rect x="38.5475%" y="405" width="10.4283%" height="15" fill="rgb(229,67,23)" fg:x="207" fg:w="56"/><text x="38.7975%" y="415.50">[unknown]</text></g><g><title>[unknown] (55 samples, 10.24%)</title><rect x="38.7337%" y="389" width="10.2421%" height="15" fill="rgb(249,83,47)" fg:x="208" fg:w="55"/><text x="38.9837%" y="399.50">[unknown]</text></g><g><title>[unknown] (54 samples, 10.06%)</title><rect x="38.9199%" y="373" width="10.0559%" height="15" fill="rgb(215,43,3)" fg:x="209" fg:w="54"/><text x="39.1699%" y="383.50">[unknown]</text></g><g><title>[unknown] (54 samples, 10.06%)</title><rect x="38.9199%" y="357" width="10.0559%" height="15" fill="rgb(238,154,13)" fg:x="209" fg:w="54"/><text x="39.1699%" y="367.50">[unknown]</text></g><g><title>[unknown] (52 samples, 9.68%)</title><rect x="39.2924%" y="341" width="9.6834%" height="15" fill="rgb(219,56,2)" fg:x="211" fg:w="52"/><text x="39.5424%" y="351.50">[unknown]</text></g><g><title>[unknown] (51 samples, 9.50%)</title><rect x="39.4786%" y="325" width="9.4972%" height="15" fill="rgb(233,0,4)" fg:x="212" fg:w="51"/><text x="39.7286%" y="335.50">[unknown]</text></g><g><title>[unknown] (45 samples, 8.38%)</title><rect x="40.5959%" y="309" width="8.3799%" height="15" fill="rgb(235,30,7)" fg:x="218" fg:w="45"/><text x="40.8459%" y="319.50">[unknown]</text></g><g><title>[unknown] (33 samples, 6.15%)</title><rect x="42.8305%" y="293" width="6.1453%" height="15" fill="rgb(250,79,13)" fg:x="230" fg:w="33"/><text x="43.0805%" y="303.50">[unknown]</text></g><g><title>[unknown] (25 samples, 4.66%)</title><rect x="44.3203%" y="277" width="4.6555%" height="15" fill="rgb(211,146,34)" fg:x="238" fg:w="25"/><text x="44.5703%" y="287.50">[unkn..</text></g><g><title>[unknown] (22 samples, 4.10%)</title><rect x="44.8790%" y="261" width="4.0968%" height="15" fill="rgb(228,22,38)" fg:x="241" fg:w="22"/><text x="45.1290%" y="271.50">[unk..</text></g><g><title>[unknown] (16 samples, 2.98%)</title><rect x="45.9963%" y="245" width="2.9795%" height="15" fill="rgb(235,168,5)" fg:x="247" fg:w="16"/><text x="46.2463%" y="255.50">[un..</text></g><g><title>[unknown] (14 samples, 2.61%)</title><rect x="46.3687%" y="229" width="2.6071%" height="15" fill="rgb(221,155,16)" fg:x="249" fg:w="14"/><text x="46.6187%" y="239.50">[u..</text></g><g><title>[unknown] (10 samples, 1.86%)</title><rect x="47.1136%" y="213" width="1.8622%" height="15" fill="rgb(215,215,53)" fg:x="253" fg:w="10"/><text x="47.3636%" y="223.50">[..</text></g><g><title>[unknown] (9 samples, 1.68%)</title><rect x="47.2998%" y="197" width="1.6760%" height="15" fill="rgb(223,4,10)" fg:x="254" fg:w="9"/><text x="47.5498%" y="207.50"></text></g><g><title>[unknown] (9 samples, 1.68%)</title><rect x="47.2998%" y="181" width="1.6760%" height="15" fill="rgb(234,103,6)" fg:x="254" fg:w="9"/><text x="47.5498%" y="191.50"></text></g><g><title>[unknown] (8 samples, 1.49%)</title><rect x="47.4860%" y="165" width="1.4898%" height="15" fill="rgb(227,97,0)" fg:x="255" fg:w="8"/><text x="47.7360%" y="175.50"></text></g><g><title>[unknown] (6 samples, 1.12%)</title><rect x="47.8585%" y="149" width="1.1173%" height="15" fill="rgb(234,150,53)" fg:x="257" fg:w="6"/><text x="48.1085%" y="159.50"></text></g><g><title>[unknown] (6 samples, 1.12%)</title><rect x="47.8585%" y="133" width="1.1173%" height="15" fill="rgb(228,201,54)" fg:x="257" fg:w="6"/><text x="48.1085%" y="143.50"></text></g><g><title>[unknown] (4 samples, 0.74%)</title><rect x="48.2309%" y="117" width="0.7449%" height="15" fill="rgb(222,22,37)" fg:x="259" fg:w="4"/><text x="48.4809%" y="127.50"></text></g><g><title>[unknown] (2 samples, 0.37%)</title><rect x="48.6034%" y="101" width="0.3724%" height="15" fill="rgb(237,53,32)" fg:x="261" fg:w="2"/><text x="48.8534%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap2::Mmap&gt; (7 samples, 1.30%)</title><rect x="48.9758%" y="565" width="1.3035%" height="15" fill="rgb(233,25,53)" fg:x="263" fg:w="7"/><text x="49.2258%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap2::os::MmapInner&gt; (7 samples, 1.30%)</title><rect x="48.9758%" y="549" width="1.3035%" height="15" fill="rgb(210,40,34)" fg:x="263" fg:w="7"/><text x="49.2258%" y="559.50"></text></g><g><title>&lt;memmap2::os::MmapInner as core::ops::drop::Drop&gt;::drop (7 samples, 1.30%)</title><rect x="48.9758%" y="533" width="1.3035%" height="15" fill="rgb(241,220,44)" fg:x="263" fg:w="7"/><text x="49.2258%" y="543.50"></text></g><g><title>__munmap (7 samples, 1.30%)</title><rect x="48.9758%" y="517" width="1.3035%" height="15" fill="rgb(235,28,35)" fg:x="263" fg:w="7"/><text x="49.2258%" y="527.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="48.9758%" y="501" width="1.3035%" height="15" fill="rgb(210,56,17)" fg:x="263" fg:w="7"/><text x="49.2258%" y="511.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="48.9758%" y="485" width="1.3035%" height="15" fill="rgb(224,130,29)" fg:x="263" fg:w="7"/><text x="49.2258%" y="495.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="48.9758%" y="469" width="1.3035%" height="15" fill="rgb(235,212,8)" fg:x="263" fg:w="7"/><text x="49.2258%" y="479.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="48.9758%" y="453" width="1.3035%" height="15" fill="rgb(223,33,50)" fg:x="263" fg:w="7"/><text x="49.2258%" y="463.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="48.9758%" y="437" width="1.3035%" height="15" fill="rgb(219,149,13)" fg:x="263" fg:w="7"/><text x="49.2258%" y="447.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="48.9758%" y="421" width="1.3035%" height="15" fill="rgb(250,156,29)" fg:x="263" fg:w="7"/><text x="49.2258%" y="431.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="48.9758%" y="405" width="1.3035%" height="15" fill="rgb(216,193,19)" fg:x="263" fg:w="7"/><text x="49.2258%" y="415.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="48.9758%" y="389" width="1.3035%" height="15" fill="rgb(216,135,14)" fg:x="263" fg:w="7"/><text x="49.2258%" y="399.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="48.9758%" y="373" width="1.3035%" height="15" fill="rgb(241,47,5)" fg:x="263" fg:w="7"/><text x="49.2258%" y="383.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="48.9758%" y="357" width="1.3035%" height="15" fill="rgb(233,42,35)" fg:x="263" fg:w="7"/><text x="49.2258%" y="367.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="48.9758%" y="341" width="1.3035%" height="15" fill="rgb(231,13,6)" fg:x="263" fg:w="7"/><text x="49.2258%" y="351.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="48.9758%" y="325" width="1.3035%" height="15" fill="rgb(207,181,40)" fg:x="263" fg:w="7"/><text x="49.2258%" y="335.50"></text></g><g><title>[unknown] (7 samples, 1.30%)</title><rect x="48.9758%" y="309" width="1.3035%" height="15" fill="rgb(254,173,49)" fg:x="263" fg:w="7"/><text x="49.2258%" y="319.50"></text></g><g><title>[unknown] (4 samples, 0.74%)</title><rect x="49.5345%" y="293" width="0.7449%" height="15" fill="rgb(221,1,38)" fg:x="266" fg:w="4"/><text x="49.7845%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.56%)</title><rect x="49.7207%" y="277" width="0.5587%" height="15" fill="rgb(206,124,46)" fg:x="267" fg:w="3"/><text x="49.9707%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.56%)</title><rect x="49.7207%" y="261" width="0.5587%" height="15" fill="rgb(249,21,11)" fg:x="267" fg:w="3"/><text x="49.9707%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.37%)</title><rect x="49.9069%" y="245" width="0.3724%" height="15" fill="rgb(222,201,40)" fg:x="268" fg:w="2"/><text x="50.1569%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (14 samples, 2.61%)</title><rect x="53.6313%" y="549" width="2.6071%" height="15" fill="rgb(235,61,29)" fg:x="288" fg:w="14"/><text x="53.8813%" y="559.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.37%)</title><rect x="58.2868%" y="533" width="0.3724%" height="15" fill="rgb(219,207,3)" fg:x="313" fg:w="2"/><text x="58.5368%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.37%)</title><rect x="58.2868%" y="517" width="0.3724%" height="15" fill="rgb(222,56,46)" fg:x="313" fg:w="2"/><text x="58.5368%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (57 samples, 10.61%)</title><rect x="56.2384%" y="549" width="10.6145%" height="15" fill="rgb(239,76,54)" fg:x="302" fg:w="57"/><text x="56.4884%" y="559.50">alloc::vec::Vec..</text></g><g><title>core::ptr::write (44 samples, 8.19%)</title><rect x="58.6592%" y="533" width="8.1937%" height="15" fill="rgb(231,124,27)" fg:x="315" fg:w="44"/><text x="58.9092%" y="543.50">core::ptr::..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.19%)</title><rect x="67.2253%" y="485" width="0.1862%" height="15" fill="rgb(249,195,6)" fg:x="361" fg:w="1"/><text x="67.4753%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.19%)</title><rect x="67.4115%" y="485" width="0.1862%" height="15" fill="rgb(237,174,47)" fg:x="362" fg:w="1"/><text x="67.6615%" y="495.50"></text></g><g><title>[libc.so.6] (14 samples, 2.61%)</title><rect x="78.7709%" y="341" width="2.6071%" height="15" fill="rgb(206,201,31)" fg:x="423" fg:w="14"/><text x="79.0209%" y="351.50">[l..</text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="81.1918%" y="325" width="0.1862%" height="15" fill="rgb(231,57,52)" fg:x="436" fg:w="1"/><text x="81.4418%" y="335.50"></text></g><g><title>[unknown] (76 samples, 14.15%)</title><rect x="81.3780%" y="341" width="14.1527%" height="15" fill="rgb(248,177,22)" fg:x="437" fg:w="76"/><text x="81.6280%" y="351.50">[unknown]</text></g><g><title>[unknown] (52 samples, 9.68%)</title><rect x="85.8473%" y="325" width="9.6834%" height="15" fill="rgb(215,211,37)" fg:x="461" fg:w="52"/><text x="86.0973%" y="335.50">[unknown]</text></g><g><title>[unknown] (51 samples, 9.50%)</title><rect x="86.0335%" y="309" width="9.4972%" height="15" fill="rgb(241,128,51)" fg:x="462" fg:w="51"/><text x="86.2835%" y="319.50">[unknown]</text></g><g><title>[unknown] (51 samples, 9.50%)</title><rect x="86.0335%" y="293" width="9.4972%" height="15" fill="rgb(227,165,31)" fg:x="462" fg:w="51"/><text x="86.2835%" y="303.50">[unknown]</text></g><g><title>[unknown] (47 samples, 8.75%)</title><rect x="86.7784%" y="277" width="8.7523%" height="15" fill="rgb(228,167,24)" fg:x="466" fg:w="47"/><text x="87.0284%" y="287.50">[unknown]</text></g><g><title>[unknown] (40 samples, 7.45%)</title><rect x="88.0819%" y="261" width="7.4488%" height="15" fill="rgb(228,143,12)" fg:x="473" fg:w="40"/><text x="88.3319%" y="271.50">[unknown]</text></g><g><title>[unknown] (37 samples, 6.89%)</title><rect x="88.6406%" y="245" width="6.8901%" height="15" fill="rgb(249,149,8)" fg:x="476" fg:w="37"/><text x="88.8906%" y="255.50">[unknown]</text></g><g><title>[unknown] (35 samples, 6.52%)</title><rect x="89.0130%" y="229" width="6.5177%" height="15" fill="rgb(243,35,44)" fg:x="478" fg:w="35"/><text x="89.2630%" y="239.50">[unknown]</text></g><g><title>[unknown] (29 samples, 5.40%)</title><rect x="90.1304%" y="213" width="5.4004%" height="15" fill="rgb(246,89,9)" fg:x="484" fg:w="29"/><text x="90.3804%" y="223.50">[unknow..</text></g><g><title>[unknown] (24 samples, 4.47%)</title><rect x="91.0615%" y="197" width="4.4693%" height="15" fill="rgb(233,213,13)" fg:x="489" fg:w="24"/><text x="91.3115%" y="207.50">[unkn..</text></g><g><title>[unknown] (19 samples, 3.54%)</title><rect x="91.9926%" y="181" width="3.5382%" height="15" fill="rgb(233,141,41)" fg:x="494" fg:w="19"/><text x="92.2426%" y="191.50">[un..</text></g><g><title>[unknown] (15 samples, 2.79%)</title><rect x="92.7374%" y="165" width="2.7933%" height="15" fill="rgb(239,167,4)" fg:x="498" fg:w="15"/><text x="92.9874%" y="175.50">[u..</text></g><g><title>[unknown] (11 samples, 2.05%)</title><rect x="93.4823%" y="149" width="2.0484%" height="15" fill="rgb(209,217,16)" fg:x="502" fg:w="11"/><text x="93.7323%" y="159.50">[..</text></g><g><title>[unknown] (6 samples, 1.12%)</title><rect x="94.4134%" y="133" width="1.1173%" height="15" fill="rgb(219,88,35)" fg:x="507" fg:w="6"/><text x="94.6634%" y="143.50"></text></g><g><title>[unknown] (4 samples, 0.74%)</title><rect x="94.7858%" y="117" width="0.7449%" height="15" fill="rgb(220,193,23)" fg:x="509" fg:w="4"/><text x="95.0358%" y="127.50"></text></g><g><title>[libc.so.6] (132 samples, 24.58%)</title><rect x="71.5084%" y="357" width="24.5810%" height="15" fill="rgb(230,90,52)" fg:x="384" fg:w="132"/><text x="71.7584%" y="367.50">[libc.so.6]</text></g><g><title>__default_morecore (3 samples, 0.56%)</title><rect x="95.5307%" y="341" width="0.5587%" height="15" fill="rgb(252,106,19)" fg:x="513" fg:w="3"/><text x="95.7807%" y="351.50"></text></g><g><title>__sbrk (3 samples, 0.56%)</title><rect x="95.5307%" y="325" width="0.5587%" height="15" fill="rgb(206,74,20)" fg:x="513" fg:w="3"/><text x="95.7807%" y="335.50"></text></g><g><title>brk (3 samples, 0.56%)</title><rect x="95.5307%" y="309" width="0.5587%" height="15" fill="rgb(230,138,44)" fg:x="513" fg:w="3"/><text x="95.7807%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.56%)</title><rect x="95.5307%" y="293" width="0.5587%" height="15" fill="rgb(235,182,43)" fg:x="513" fg:w="3"/><text x="95.7807%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.37%)</title><rect x="95.7169%" y="277" width="0.3724%" height="15" fill="rgb(242,16,51)" fg:x="514" fg:w="2"/><text x="95.9669%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.37%)</title><rect x="95.7169%" y="261" width="0.3724%" height="15" fill="rgb(248,9,4)" fg:x="514" fg:w="2"/><text x="95.9669%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.37%)</title><rect x="95.7169%" y="245" width="0.3724%" height="15" fill="rgb(210,31,22)" fg:x="514" fg:w="2"/><text x="95.9669%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.37%)</title><rect x="95.7169%" y="229" width="0.3724%" height="15" fill="rgb(239,54,39)" fg:x="514" fg:w="2"/><text x="95.9669%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.37%)</title><rect x="95.7169%" y="213" width="0.3724%" height="15" fill="rgb(230,99,41)" fg:x="514" fg:w="2"/><text x="95.9669%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.37%)</title><rect x="95.7169%" y="197" width="0.3724%" height="15" fill="rgb(253,106,12)" fg:x="514" fg:w="2"/><text x="95.9669%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="95.9032%" y="181" width="0.1862%" height="15" fill="rgb(213,46,41)" fg:x="515" fg:w="1"/><text x="96.1532%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="95.9032%" y="165" width="0.1862%" height="15" fill="rgb(215,133,35)" fg:x="515" fg:w="1"/><text x="96.1532%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="95.9032%" y="149" width="0.1862%" height="15" fill="rgb(213,28,5)" fg:x="515" fg:w="1"/><text x="96.1532%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (154 samples, 28.68%)</title><rect x="67.5978%" y="469" width="28.6778%" height="15" fill="rgb(215,77,49)" fg:x="363" fg:w="154"/><text x="67.8478%" y="479.50">&lt;alloc::alloc::Global as core::alloc::Allocato..</text></g><g><title>alloc::alloc::Global::grow_impl (154 samples, 28.68%)</title><rect x="67.5978%" y="453" width="28.6778%" height="15" fill="rgb(248,100,22)" fg:x="363" fg:w="154"/><text x="67.8478%" y="463.50">alloc::alloc::Global::grow_impl</text></g><g><title>alloc::alloc::realloc (154 samples, 28.68%)</title><rect x="67.5978%" y="437" width="28.6778%" height="15" fill="rgb(208,67,9)" fg:x="363" fg:w="154"/><text x="67.8478%" y="447.50">alloc::alloc::realloc</text></g><g><title>__rdl_realloc (154 samples, 28.68%)</title><rect x="67.5978%" y="421" width="28.6778%" height="15" fill="rgb(219,133,21)" fg:x="363" fg:w="154"/><text x="67.8478%" y="431.50">__rdl_realloc</text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (154 samples, 28.68%)</title><rect x="67.5978%" y="405" width="28.6778%" height="15" fill="rgb(246,46,29)" fg:x="363" fg:w="154"/><text x="67.8478%" y="415.50">std::sys::pal::unix::alloc::&lt;impl core::alloc:..</text></g><g><title>realloc (154 samples, 28.68%)</title><rect x="67.5978%" y="389" width="28.6778%" height="15" fill="rgb(246,185,52)" fg:x="363" fg:w="154"/><text x="67.8478%" y="399.50">realloc</text></g><g><title>[libc.so.6] (141 samples, 26.26%)</title><rect x="70.0186%" y="373" width="26.2570%" height="15" fill="rgb(252,136,11)" fg:x="376" fg:w="141"/><text x="70.2686%" y="383.50">[libc.so.6]</text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.0894%" y="357" width="0.1862%" height="15" fill="rgb(219,138,53)" fg:x="516" fg:w="1"/><text x="96.3394%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.0894%" y="341" width="0.1862%" height="15" fill="rgb(211,51,23)" fg:x="516" fg:w="1"/><text x="96.3394%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.0894%" y="325" width="0.1862%" height="15" fill="rgb(247,221,28)" fg:x="516" fg:w="1"/><text x="96.3394%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.0894%" y="309" width="0.1862%" height="15" fill="rgb(251,222,45)" fg:x="516" fg:w="1"/><text x="96.3394%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.0894%" y="293" width="0.1862%" height="15" fill="rgb(217,162,53)" fg:x="516" fg:w="1"/><text x="96.3394%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.0894%" y="277" width="0.1862%" height="15" fill="rgb(229,93,14)" fg:x="516" fg:w="1"/><text x="96.3394%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.0894%" y="261" width="0.1862%" height="15" fill="rgb(209,67,49)" fg:x="516" fg:w="1"/><text x="96.3394%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.0894%" y="245" width="0.1862%" height="15" fill="rgb(213,87,29)" fg:x="516" fg:w="1"/><text x="96.3394%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.0894%" y="229" width="0.1862%" height="15" fill="rgb(205,151,52)" fg:x="516" fg:w="1"/><text x="96.3394%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.0894%" y="213" width="0.1862%" height="15" fill="rgb(253,215,39)" fg:x="516" fg:w="1"/><text x="96.3394%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.0894%" y="197" width="0.1862%" height="15" fill="rgb(221,220,41)" fg:x="516" fg:w="1"/><text x="96.3394%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.0894%" y="181" width="0.1862%" height="15" fill="rgb(218,133,21)" fg:x="516" fg:w="1"/><text x="96.3394%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.0894%" y="165" width="0.1862%" height="15" fill="rgb(221,193,43)" fg:x="516" fg:w="1"/><text x="96.3394%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.0894%" y="149" width="0.1862%" height="15" fill="rgb(240,128,52)" fg:x="516" fg:w="1"/><text x="96.3394%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="96.0894%" y="133" width="0.1862%" height="15" fill="rgb(253,114,12)" fg:x="516" fg:w="1"/><text x="96.3394%" y="143.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.37%)</title><rect x="96.2756%" y="469" width="0.3724%" height="15" fill="rgb(215,223,47)" fg:x="517" fg:w="2"/><text x="96.5256%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (159 samples, 29.61%)</title><rect x="67.5978%" y="485" width="29.6089%" height="15" fill="rgb(248,225,23)" fg:x="363" fg:w="159"/><text x="67.8478%" y="495.50">alloc::raw_vec::finish_grow</text></g><g><title>malloc (3 samples, 0.56%)</title><rect x="96.6480%" y="469" width="0.5587%" height="15" fill="rgb(250,108,0)" fg:x="519" fg:w="3"/><text x="96.8980%" y="479.50"></text></g><g><title>[libc.so.6] (3 samples, 0.56%)</title><rect x="96.6480%" y="453" width="0.5587%" height="15" fill="rgb(228,208,7)" fg:x="519" fg:w="3"/><text x="96.8980%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (164 samples, 30.54%)</title><rect x="66.8529%" y="549" width="30.5400%" height="15" fill="rgb(244,45,10)" fg:x="359" fg:w="164"/><text x="67.1029%" y="559.50">alloc::vec::Vec&lt;T,A&gt;::reserve</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (164 samples, 30.54%)</title><rect x="66.8529%" y="533" width="30.5400%" height="15" fill="rgb(207,125,25)" fg:x="359" fg:w="164"/><text x="67.1029%" y="543.50">alloc::raw_vec::RawVec&lt;T,A&gt;::reserve</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (162 samples, 30.17%)</title><rect x="67.2253%" y="517" width="30.1676%" height="15" fill="rgb(210,195,18)" fg:x="361" fg:w="162"/><text x="67.4753%" y="527.50">alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (162 samples, 30.17%)</title><rect x="67.2253%" y="501" width="30.1676%" height="15" fill="rgb(249,80,12)" fg:x="361" fg:w="162"/><text x="67.4753%" y="511.50">alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized</text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.19%)</title><rect x="97.2067%" y="485" width="0.1862%" height="15" fill="rgb(221,65,9)" fg:x="522" fg:w="1"/><text x="97.4567%" y="495.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.19%)</title><rect x="97.2067%" y="469" width="0.1862%" height="15" fill="rgb(235,49,36)" fg:x="522" fg:w="1"/><text x="97.4567%" y="479.50"></text></g><g><title>fast_nn_burn (532 samples, 99.07%)</title><rect x="0.0000%" y="741" width="99.0689%" height="15" fill="rgb(225,32,20)" fg:x="0" fg:w="532"/><text x="0.2500%" y="751.50">fast_nn_burn</text></g><g><title>_start (474 samples, 88.27%)</title><rect x="10.8007%" y="725" width="88.2682%" height="15" fill="rgb(215,141,46)" fg:x="58" fg:w="474"/><text x="11.0507%" y="735.50">_start</text></g><g><title>__libc_start_main (474 samples, 88.27%)</title><rect x="10.8007%" y="709" width="88.2682%" height="15" fill="rgb(250,160,47)" fg:x="58" fg:w="474"/><text x="11.0507%" y="719.50">__libc_start_main</text></g><g><title>[libc.so.6] (474 samples, 88.27%)</title><rect x="10.8007%" y="693" width="88.2682%" height="15" fill="rgb(216,222,40)" fg:x="58" fg:w="474"/><text x="11.0507%" y="703.50">[libc.so.6]</text></g><g><title>main (474 samples, 88.27%)</title><rect x="10.8007%" y="677" width="88.2682%" height="15" fill="rgb(234,217,39)" fg:x="58" fg:w="474"/><text x="11.0507%" y="687.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (474 samples, 88.27%)</title><rect x="10.8007%" y="661" width="88.2682%" height="15" fill="rgb(207,178,40)" fg:x="58" fg:w="474"/><text x="11.0507%" y="671.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (474 samples, 88.27%)</title><rect x="10.8007%" y="645" width="88.2682%" height="15" fill="rgb(221,136,13)" fg:x="58" fg:w="474"/><text x="11.0507%" y="655.50">core::ops::function::FnOnce::call_once</text></g><g><title>fast_nn_burn::main (474 samples, 88.27%)</title><rect x="10.8007%" y="629" width="88.2682%" height="15" fill="rgb(249,199,10)" fg:x="58" fg:w="474"/><text x="11.0507%" y="639.50">fast_nn_burn::main</text></g><g><title>fast_nn_burn::cli::launcher (474 samples, 88.27%)</title><rect x="10.8007%" y="613" width="88.2682%" height="15" fill="rgb(249,222,13)" fg:x="58" fg:w="474"/><text x="11.0507%" y="623.50">fast_nn_burn::cli::launcher</text></g><g><title>fast_nn_burn::parser::get_input (449 samples, 83.61%)</title><rect x="15.4562%" y="597" width="83.6127%" height="15" fill="rgb(244,185,38)" fg:x="83" fg:w="449"/><text x="15.7062%" y="607.50">fast_nn_burn::parser::get_input</text></g><g><title>fast_nn_burn::parser::reading_cnf_perf2 (449 samples, 83.61%)</title><rect x="15.4562%" y="581" width="83.6127%" height="15" fill="rgb(236,202,9)" fg:x="83" fg:w="449"/><text x="15.7062%" y="591.50">fast_nn_burn::parser::reading_cnf_perf2</text></g><g><title>fast_nn_burn::graph::ArgumentationFramework::add_attack (262 samples, 48.79%)</title><rect x="50.2793%" y="565" width="48.7896%" height="15" fill="rgb(250,229,37)" fg:x="270" fg:w="262"/><text x="50.5293%" y="575.50">fast_nn_burn::graph::ArgumentationFramework::add_attack</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (9 samples, 1.68%)</title><rect x="97.3929%" y="549" width="1.6760%" height="15" fill="rgb(206,174,23)" fg:x="523" fg:w="9"/><text x="97.6429%" y="559.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (9 samples, 1.68%)</title><rect x="97.3929%" y="533" width="1.6760%" height="15" fill="rgb(211,33,43)" fg:x="523" fg:w="9"/><text x="97.6429%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (9 samples, 1.68%)</title><rect x="97.3929%" y="517" width="1.6760%" height="15" fill="rgb(245,58,50)" fg:x="523" fg:w="9"/><text x="97.6429%" y="527.50"></text></g><g><title>all (537 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(244,68,36)" fg:x="0" fg:w="537"/><text x="0.2500%" y="767.50"></text></g><g><title>perf-exec (5 samples, 0.93%)</title><rect x="99.0689%" y="741" width="0.9311%" height="15" fill="rgb(232,229,15)" fg:x="532" fg:w="5"/><text x="99.3189%" y="751.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="99.0689%" y="725" width="0.9311%" height="15" fill="rgb(254,30,23)" fg:x="532" fg:w="5"/><text x="99.3189%" y="735.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="99.0689%" y="709" width="0.9311%" height="15" fill="rgb(235,160,14)" fg:x="532" fg:w="5"/><text x="99.3189%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="99.0689%" y="693" width="0.9311%" height="15" fill="rgb(212,155,44)" fg:x="532" fg:w="5"/><text x="99.3189%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="99.0689%" y="677" width="0.9311%" height="15" fill="rgb(226,2,50)" fg:x="532" fg:w="5"/><text x="99.3189%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="99.0689%" y="661" width="0.9311%" height="15" fill="rgb(234,177,6)" fg:x="532" fg:w="5"/><text x="99.3189%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="99.0689%" y="645" width="0.9311%" height="15" fill="rgb(217,24,9)" fg:x="532" fg:w="5"/><text x="99.3189%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="99.0689%" y="629" width="0.9311%" height="15" fill="rgb(220,13,46)" fg:x="532" fg:w="5"/><text x="99.3189%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="99.0689%" y="613" width="0.9311%" height="15" fill="rgb(239,221,27)" fg:x="532" fg:w="5"/><text x="99.3189%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="99.0689%" y="597" width="0.9311%" height="15" fill="rgb(222,198,25)" fg:x="532" fg:w="5"/><text x="99.3189%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="99.0689%" y="581" width="0.9311%" height="15" fill="rgb(211,99,13)" fg:x="532" fg:w="5"/><text x="99.3189%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="99.0689%" y="565" width="0.9311%" height="15" fill="rgb(232,111,31)" fg:x="532" fg:w="5"/><text x="99.3189%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="99.0689%" y="549" width="0.9311%" height="15" fill="rgb(245,82,37)" fg:x="532" fg:w="5"/><text x="99.3189%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="99.0689%" y="533" width="0.9311%" height="15" fill="rgb(227,149,46)" fg:x="532" fg:w="5"/><text x="99.3189%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="99.0689%" y="517" width="0.9311%" height="15" fill="rgb(218,36,50)" fg:x="532" fg:w="5"/><text x="99.3189%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="99.0689%" y="501" width="0.9311%" height="15" fill="rgb(226,80,48)" fg:x="532" fg:w="5"/><text x="99.3189%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="99.0689%" y="485" width="0.9311%" height="15" fill="rgb(238,224,15)" fg:x="532" fg:w="5"/><text x="99.3189%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="99.0689%" y="469" width="0.9311%" height="15" fill="rgb(241,136,10)" fg:x="532" fg:w="5"/><text x="99.3189%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.93%)</title><rect x="99.0689%" y="453" width="0.9311%" height="15" fill="rgb(208,32,45)" fg:x="532" fg:w="5"/><text x="99.3189%" y="463.50"></text></g></svg></svg>